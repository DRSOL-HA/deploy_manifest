def REPOS = [
  'user-service': 'git@github.com:DRSOL-HA/WebBoard-Service.git',
  'file-service': 'git@github.com:DRSOL-HA/WebBoard-Service.git',
  'post-service': 'git@github.com:DRSOL-HA/WebBoard-Service.git',
  'frontend'    : 'git@github.com:DRSOL-HA/WebBoard-Service.git',
  'nginx'       : 'git@github.com:DRSOL-HA/WebBoard-Service.git',
]

pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: buildkit
spec:
  serviceAccountName: jenkins
  containers:
  - name: buildctl
    image: moby/buildkit:rootless
    command: ["cat"]
    tty: true
    volumeMounts:
    - name: tls
      mountPath: /tls
      readOnly: true

  - name: git
    image: alpine/git:2.45.2
    command: ["cat"]
    tty: true

  - name: yq
    image: ghcr.io/mikefarah/yq:4
    command: ["cat"]
    tty: true

  volumes:
  - name: tls
    secret:
      secretName: buildkit-client-tls
"""
    }
  }

  parameters {
    choice(
      name: 'SERVICE',
      choices: 'user-service\nfile-service\npost-service\nfrontend\nnginx',
      description: '빌드/배포할 서비스'
    )
    string(name: 'BRANCH', defaultValue: 'main', description: '서비스 코드 브랜치')
    string(name: 'IMAGE_TAG', defaultValue: '', description: '비우면 v<빌드번호>')
  }

  options {
    disableConcurrentBuilds()
    skipDefaultCheckout(true)
  }

  environment {
    REGISTRY      = 'ghcr.io/drsol-ha'   
    BUILDKIT_ADDR = 'tcp://buildkitd.buildkit.svc.cluster.local:1234'
  }

  stages {
    stage('Prepare environment') {
      steps {
        script {
          env.IMAGE_TAG = (params.IMAGE_TAG?.trim()) ? params.IMAGE_TAG.trim() : "v${env.BUILD_NUMBER}"
          echo "Image tag set to: ${env.IMAGE_TAG}"
        }
      }
    }

    stage('Checkout service code') {
      steps {
        container('git') {
          script {
            env.REPO_HTTPS = REPOS[params.SERVICE].replace('git@github.com:', 'https://github.com/')
          }
          withEnv(["BRANCH=${params.BRANCH}"]) {
            withCredentials([usernamePassword(
              credentialsId: '2ebc3d3c-d09f-4180-8a21-74f50626cd2b',
              usernameVariable: 'GH_USER',
              passwordVariable: 'GH_PAT'
            )]) {
              sh '''
                set -euo pipefail
                rm -rf src && mkdir -p src

                # 권한 체크
                { set +x; } 2>/dev/null
                git -c http.extraheader="AUTHORIZATION: Basic $(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\n')" \
                  ls-remote --heads "$REPO_HTTPS" >/dev/null
                { set -x; } 2>/dev/null || true

                # clone
                { set +x; } 2>/dev/null
                git -c http.extraheader="AUTHORIZATION: Basic $(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\n')" \
                  clone --depth=1 -b "$BRANCH" "$REPO_HTTPS" src/app
                { set -x; } 2>/dev/null || true
              '''
            }
          }
        }
      }
    }

    stage('Resolve build context') {
      steps {
        container('git') {
          withEnv(["SERVICE=${params.SERVICE}"]) {
            sh '''
              set -euo pipefail
              # 후보 경로(모노레포 내 서비스별 디렉터리 관례를 폭넓게 탐지)
              CANDIDATES=(
                "services/${SERVICE}"
                "apps/${SERVICE}"
                "packages/${SERVICE}"
                "${SERVICE}"
                "apps/${SERVICE}/app"         # 예: 프론트/백 중첩
                "services/${SERVICE}/app"
              )

              FOUND=""
              for c in "${CANDIDATES[@]}"; do
                if [ -d "src/app/$c" ] && ls "src/app/$c"/Dockerfile* >/dev/null 2>&1; then
                  FOUND="$c"
                  break
                fi
              done

              if [ -z "$FOUND" ]; then
                echo "ERROR: '${SERVICE}' 서비스의 Dockerfile 경로를 찾지 못했습니다."
                echo "다음 중 하나에 Dockerfile이 있어야 합니다:"
                printf ' - %s\n' "${CANDIDATES[@]}"
                exit 2
              fi

              echo "Detected build context: $FOUND"
              echo "$FOUND" > .build_context_path
            '''
          }
        }
      }
    }

    stage('Build & Push image') {
      steps {
        container('buildctl') {
          withCredentials([usernamePassword(credentialsId: 'ghcr',
            usernameVariable: 'GHCR_USER', passwordVariable: 'GHCR_PAT')]) {
            withEnv(["SERVICE=${params.SERVICE}"]) {
              sh '''
                set -euo pipefail

                CONTEXT_PATH="$(cat .build_context_path)"
                IMAGE_NAME="${REGISTRY}/board-${SERVICE}"

                export HOME="$WORKSPACE"
                export DOCKER_CONFIG="$HOME/.docker"
                mkdir -p "$DOCKER_CONFIG"

                { set +x; } 2>/dev/null
                AUTH=$(printf '%s:%s' "$GHCR_USER" "$GHCR_PAT" | base64 | tr -d '\n')
                cat > "$DOCKER_CONFIG/config.json" <<EOF
                { "auths": { "ghcr.io": { "auth": "$AUTH" } } }
                EOF
                { set -x; } 2>/dev/null || true

                buildctl --addr "$BUILDKIT_ADDR" \
                  --tlscacert /tls/ca.crt --tlscert /tls/client.crt --tlskey /tls/client.key \
                  build --frontend=dockerfile.v0 --progress=plain \
                  --local context="src/app/${CONTEXT_PATH}" \
                  --local dockerfile="src/app/${CONTEXT_PATH}" \
                  --output type=image,name="$IMAGE_NAME:$IMAGE_TAG",push=true
              '''
            }
          }
        }
      }
    }

    stage('Bump manifest tag') {
      steps {
        // deploy_manifest clone (HTTPS + PAT)
        container('git') {
          withCredentials([usernamePassword(
            credentialsId: '2ebc3d3c-d09f-4180-8a21-74f50626cd2b',
            usernameVariable: 'GH_USER',
            passwordVariable: 'GH_PAT'
          )]) {
            sh '''
              set -euo pipefail
              rm -rf manifest && mkdir -p manifest
              cd manifest
              { set +x; } 2>/dev/null
              git -c http.extraheader="AUTHORIZATION: Basic $(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\n')" \
                clone --depth=1 https://github.com/DRSOL-HA/deploy_manifest.git repo
              { set -x; } 2>/dev/null || true
              cd repo
              git config user.name  "jenkins"
              git config user.email "ci@drsol-ha.local"
            '''
          }
        }

        container('yq') {
          withEnv(["SERVICE=${params.SERVICE}"]) {
            sh '''
              set -euo pipefail
              cd manifest/repo
              # 보드/웹보드 어느 경로든 지원
              FILE="apps/board/kustomization.yaml"
              [ -f "$FILE" ] || FILE="apps/webboard/kustomization.yaml"

              export IMG_NAME="ghcr.io/drsol-ha/board-${SERVICE}"
              export NEW_TAG="${IMAGE_TAG}"

              yq -i '(.images[] | select(.name == strenv(IMG_NAME)).newTag) = strenv(NEW_TAG)' "$FILE"
            '''
          }
        }

        // commit & push
        container('git') {
          withCredentials([usernamePassword(
            credentialsId: '2ebc3d3c-d09f-4180-8a21-74f50626cd2b',
            usernameVariable: 'GH_USER',
            passwordVariable: 'GH_PAT'
          )]) {
            sh '''
              set -euo pipefail
              cd manifest/repo
              if git diff --quiet -- .; then
                echo "No manifest changes to commit."
              else
                git add -A
                git commit -m "ci: bump board-${SERVICE} -> ${IMAGE_TAG}"
                { set +x; } 2>/dev/null
                git -c http.extraheader="AUTHORIZATION: Basic $(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\n')" \
                  push origin HEAD:main
                { set -x; } 2>/dev/null || true
              fi
            '''
          }
        }
      }
    }
  }
}
