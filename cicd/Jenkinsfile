def REPOS = [
  "user-service": "git@github.com:DRSOL-HA/board-user-service.git",
  "file-service": "git@github.com:DRSOL-HA/board-file-service.git",
  "post-service": "git@github.com:DRSOL-HA/board-post-service.git",
  "frontend"    : "git@github.com:DRSOL-HA/board-frontend.git",
]

pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: buildkit
spec:
  serviceAccountName: jenkins
  containers:
  - name: buildctl
    image: moby/buildkit:rootless
    command: ['cat']
    tty: true
    volumeMounts:
    - name: tls
      mountPath: /tls
      readOnly: true
  - name: git
    image: alpine/git:2.45.2
    command: ['cat']; tty: true
  - name: yq
    image: ghcr.io/mikefarah/yq:4
    command: ['cat']; tty: true
  volumes:
  - name: tls
    secret:
      secretName: buildkit-client-tls
"""
    }
  }

  parameters {
    choice(name: 'SERVICE',
           choices: ['user-service','file-service','post-service','frontend'].join('\n'),
           description: '빌드/배포할 서비스')
    string(name: 'BRANCH', defaultValue: 'main', description: '서비스 코드 브랜치')
    string(name: 'IMAGE_TAG', defaultValue: "v${env.BUILD_NUMBER}", description: '푸시할 이미지 태그')
  }

  environment {
    REGISTRY = 'ghcr.io/DRSOL-HA'
    BUILDKIT_ADDR = 'tcp://buildkitd.buildkit.svc.cluster.local:1234'
  }

  options { timestamps() }

  stages {
    stage('Checkout service code') {
      steps {
        container('git') {
          sshagent(credentials: ['GITOPS_DEPLOY_KEY']) {
            sh '''
              set -eux
              rm -rf src && mkdir -p src
              cd src
              REPO="${REPOS[$SERVICE]}"
              git clone --depth=1 -b "$BRANCH" "$REPO" app
            '''
          }
        }
      }
    }

    stage('Build & Push image') {
      steps {
        container('buildctl') {
          withCredentials([usernamePassword(credentialsId: 'ghcr', usernameVariable: 'GHCR_USER', passwordVariable: 'GHCR_PAT')]) {
            sh '''
              set -eux
              IMAGE_NAME="${REGISTRY}/board-${SERVICE}"
              export HOME=$WORKSPACE
              mkdir -p $HOME/.docker
              AUTH=$(printf "%s:%s" "$GHCR_USER" "$GHCR_PAT" | base64 -w0)
              cat > $HOME/.docker/config.json <<EOF
              { "auths": { "ghcr.io": { "auth": "$AUTH" } } }
              EOF

              buildctl --addr ${BUILDKIT_ADDR} \
                --tlscacert /tls/ca.crt --tlscert /tls/client.crt --tlskey /tls/client.key \
                build --frontend=dockerfile.v0 \
                --local context=src/app --local dockerfile=src/app \
                --output type=image,name=${IMAGE_NAME}:${IMAGE_TAG},push=true
            '''
          }
        }
      }
    }

    stage('Bump manifest tag') {
      steps {
        container('git') {
          sshagent(credentials: ['GITOPS_DEPLOY_KEY']) {
            sh '''
              set -eux
              rm -rf manifest && mkdir manifest && cd manifest
              git clone --depth=1 git@github.com:DRSOL-HA/deploy_manifest.git repo
              cd repo
              git config user.name  "jenkins"
              git config user.email "ci@drsol-ha.local"
            '''
          }
        }
        container('yq') {
          sh '''
            set -eux
            cd manifest/repo
            FILE="apps/board/kustomization.yaml"
            IMG_NAME="ghcr.io/DRSOL-HA/board-${SERVICE}"
            yq -i '( .images[] | select(.name == strenv(IMG_NAME)).newTag ) = strenv(IMAGE_TAG)' "$FILE"
          '''
        }
        container('git') {
          sshagent(credentials: ['GITOPS_DEPLOY_KEY']) {
            sh '''
              set -eux
              cd manifest/repo
              git add apps/board/kustomization.yaml
              git commit -m "ci: bump ${SERVICE} -> ${IMAGE_TAG}" || true
              git push origin HEAD:main
            '''
          }
        }
      }
    }
  }
}
