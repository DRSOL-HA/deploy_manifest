def REPOS = [
  'user-service': 'git@github.com:DRSOL-HA/board-user-service.git',
  'file-service': 'git@github.com:DRSOL-HA/board-file-service.git',
  'post-service': 'git@github.com:DRSOL-HA/board-post-service.git',
  'frontend'    : 'git@github.com:DRSOL-HA/board-frontend.git',
]

pipeline {
  agent {
    kubernetes {
      // === YAML 문법 및 스타일 전체 수정 ===
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: buildkit
spec:
  serviceAccountName: jenkins
  containers:
  - name: buildctl
    image: moby/buildkit:rootless
    command: ["cat"]
    tty: true
    volumeMounts:
    - name: tls
      mountPath: /tls
      readOnly: true
  - name: git
    image: alpine/git:2.45.2
    command: ["cat"]
    tty: true
  - name: yq
    image: ghcr.io/mikefarah/yq:4
    command: ["cat"]
    tty: true
  volumes:
  - name: tls
    secret:
      secretName: buildkit-client-tls
"""
    }
  }

  parameters {
    choice(
      name: 'SERVICE',
      choices: 'user-service\nfile-service\npost-service\nfrontend',
      description: '빌드/배포할 서비스'
    )
    string(name: 'BRANCH', defaultValue: 'main', description: '서비스 코드 브랜치')
    string(name: 'IMAGE_TAG', defaultValue: '', description: '비우면 v<빌드번호>')
  }

  environment {
    REGISTRY      = 'ghcr.io/drsol-ha'
    BUILDKIT_ADDR = 'tcp://buildkitd.buildkit.svc.cluster.local:1234'
    IMAGE_TAG     = ''
  }

  stages {
    stage('Prepare environment') {
      steps {
        script {
          env.IMAGE_TAG = params.IMAGE_TAG.isEmpty() ? "v${env.BUILD_NUMBER}" : params.IMAGE_TAG
          echo "Image tag set to: ${env.IMAGE_TAG}"
        }
      }
    }

    stage('Checkout service code') {
      steps {
        container('git') {
          sshagent(credentials: ['GITOPS_DEPLOY_KEY']) {
            sh """
              set -eux
              mkdir -p ~/.ssh
              ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

              rm -rf src && mkdir -p src
              git clone --depth=1 -b '${params.BRANCH}' '${REPOS[params.SERVICE]}' src/app
            """
          }
        }
      }
    }

    stage('Build & Push image') {
      steps {
        container('buildctl') {
          withCredentials([usernamePassword(credentialsId: 'ghcr',
            usernameVariable: 'GHCR_USER', passwordVariable: 'GHCR_PAT')]) {
            sh """
              set -eux
              IMAGE_NAME='${env.REGISTRY}/board-${params.SERVICE}'

              export HOME=$WORKSPACE
              mkdir -p $HOME/.docker
              AUTH=$(printf "%s:%s" "$GHCR_USER" "$GHCR_PAT" | base64 | tr -d '\\n')
              cat > "$DOCKER_CONFIG/config.json" <<EOF
              { "auths": { "ghcr.io": { "auth": "$AUTH" } } }
              EOF

              buildctl --addr ${env.BUILDKIT_ADDR} \
                --tlscacert /tls/ca.crt --tlscert /tls/client.crt --tlskey /tls/client.key \
                build --frontend=dockerfile.v0 --progress=plain \
                --local context=src/app --local dockerfile=src/app \
                --output type=image,name=\$IMAGE_NAME:${env.IMAGE_TAG},push=true
            """
          }
        }
      }
    }

    stage('Bump manifest tag') {
      steps {
        container('git') {
          sshagent(credentials: ['GITOPS_DEPLOY_KEY']) {
            sh """
              set -eux
              mkdir -p ~/.ssh
              ssh-keyscan -t rsa,ecdsa,ed25519 github.com >> ~/.ssh/known_hosts

              rm -rf manifest && mkdir -p manifest
              git clone --depth=1 git@github.com:DRSOL-HA/deploy_manifest.git manifest/repo
              cd manifest/repo
              git config user.name  "jenkins"
              git config user.email "ci@drsol-ha.local"
            """
          }
        }
        container('yq') {
          sh """
            set -eux
            cd manifest/repo
            FILE="apps/board/kustomization.yaml"
            IMG_NAME="ghcr.io/DRSOL-HA/board-${params.SERVICE}"
            yq -i '( .images[] | select(.name == strenv(IMG_NAME)).newTag ) = "${env.IMAGE_TAG}"' "\$FILE"
          """
        }
        container('git') {
          sshagent(credentials: ['GITOPS_DEPLOY_KEY']) {
            sh """
              set -eux
              cd manifest/repo
              git add apps/board/kustomization.yaml
              git commit -m "ci: bump ${params.SERVICE} -> ${env.IMAGE_TAG}" || true
              git push origin HEAD:main
            """
          }
        }
      }
    }
  }
}
